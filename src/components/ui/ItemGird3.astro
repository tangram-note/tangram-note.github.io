---
import type { ItemGrid as Props } from '~/types';
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import Button from './Button.astro';
import Image from '~/components/common/Image.astro';

const { items = [], columns, defaultIcon = '', classes = {} } = Astro.props;

const {
  container: containerClass = '',
  // container: containerClass = "sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3",
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary',
} = classes;
---

{
  items && items.length > 0 && (
    <div
      class={twMerge(
        `grid gap-8 gap-x-12 sm:gap-y-8 ${
          columns === 4
            ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
            : columns === 3
              ? 'lg:grid-cols-3 sm:grid-cols-2'
              : columns === 2
                ? 'sm:grid-cols-2 '
                : ''
        }`,
        containerClass
      )}
    >
      {items.map(({ title, description, icon, image, callToAction, classes: itemClasses = {} }) => (
        <div
          class={twMerge(
            'relative flex flex-col intersect-once intersect-quarter intercept-no-queue motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade',
            panelClass,
            itemClasses?.panel
          )}
        >
          <div class="flex items-center gap-2 mb-2">
            {(icon || defaultIcon) && (
              <Icon
                name={icon || defaultIcon}
                class={twMerge('w-6 h-6', defaultIconClass, itemClasses?.icon)}
                style="display: inline-flex; align-items: center;"
              />
            )}
            <div class={twMerge('text-xl font-bold', titleClass, itemClasses?.title)} style="display: inline-flex; align-items: center;">
              {title}
            </div>
          </div>
          {description && (
            <p class={twMerge('text-muted mt-2', descriptionClass, itemClasses?.description)} set:html={description} />
          )}
          {image && (
            <>
              <Image
                src={image.lightSrc}
                alt={image.alt || title}
                class="w-full md:h-full rounded block dark:hidden"
                style="overflow: visible;"
                width={400}
                height={300}
                sizes="(max-width: 900px) 400px, 900px"
                aspectRatio="4:3"
                layout="cover"
                loading="lazy"
                decoding="async"
              />
              <Image
                src={image.darkSrc}
                alt={image.alt || title}
                class="w-full md:h-full rounded hidden dark:block"
                style="overflow: visible;"
                width={400}
                height={300}
                sizes="(max-width: 900px) 400px, 900px"
                aspectRatio="4:3"
                layout="cover"
                loading="lazy"
                decoding="async"
              />
            </>
          )}
          {callToAction && (
            <div class="mt-2">
              <Button {...callToAction} />
            </div>
          )}
        </div>
      ))}
    </div>
  )
}
